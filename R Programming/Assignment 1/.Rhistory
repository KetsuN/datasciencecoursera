completeFrame[match(id, completeFrame$id),]
completeFrame
}
complete("specdata", 30:25)
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
complete <- function(directory, id = 1:332) {
completeFrame <- as.data.frame(x= numeric(0), y= integer(0), z = character(0))
##  Determine all file names in the specified directory (ending in .csv)
file.names <- list.files(directory, full.names = TRUE)
##  Iterate through the file names
for (fileName in file.names) {
##  Read in the file
fileFrame <- read.csv(fileName)
##  Determine the file/monitor ID
fileId <- as.numeric(fileFrame[1, 4])
##  Determine if the ID of the record matches a specified ID
if (fileId %in% id) {
print(fileId)
##  ID matches, iterate through all records in the file
numRows <- nrow(fileFrame)
completeCount <- 0
for (i in 1:numRows) {
sulfateRating <- fileFrame [i, 2]
nitrateRating <- fileFrame [i, 3]
if (!is.na(sulfateRating)) {
completeCount <- completeCount + 1
}
}
completeFrame <- rbind(completeFrame, c(fileId, completeCount))
}
}
names(completeFrame) <- c("id", "nobs")
completeFrame[match(id, completeFrame$id),]
completeFrame
}
complete("specdata", 30:25)
complete("specdata", 30:25)## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
complete <- function(directory, id = 1:332) {
completeFrame <- as.data.frame(x= numeric(0), y= integer(0), z = character(0))
##  Determine all file names in the specified directory (ending in .csv)
file.names <- list.files(directory, full.names = TRUE)
##  Iterate through the file names
for (fileName in file.names) {
##  Read in the file
fileFrame <- read.csv(fileName)
##  Determine the file/monitor ID
fileId <- as.numeric(fileFrame[1, 4])
##  Determine if the ID of the record matches a specified ID
if (fileId %in% id) {
##  ID matches, iterate through all records in the file
numRows <- nrow(fileFrame)
completeCount <- 0
for (i in 1:numRows) {
sulfateRating <- fileFrame [i, 2]
nitrateRating <- fileFrame [i, 3]
if (!is.na(sulfateRating)) {
completeCount <- completeCount + 1
}
}
completeFrame <- rbind(completeFrame, c(fileId, completeCount))
}
}
print(id)
names(completeFrame) <- c("id", "nobs")
completeFrame[match(id, completeFrame$id),]
completeFrame
}
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
complete <- function(directory, id = 1:332) {
completeFrame <- as.data.frame(x= numeric(0), y= integer(0), z = character(0))
##  Determine all file names in the specified directory (ending in .csv)
file.names <- list.files(directory, full.names = TRUE)
##  Iterate through the file names
for (fileName in file.names) {
##  Read in the file
fileFrame <- read.csv(fileName)
##  Determine the file/monitor ID
fileId <- as.numeric(fileFrame[1, 4])
##  Determine if the ID of the record matches a specified ID
if (fileId %in% id) {
##  ID matches, iterate through all records in the file
numRows <- nrow(fileFrame)
completeCount <- 0
for (i in 1:numRows) {
sulfateRating <- fileFrame [i, 2]
nitrateRating <- fileFrame [i, 3]
if (!is.na(sulfateRating)) {
completeCount <- completeCount + 1
}
}
completeFrame <- rbind(completeFrame, c(fileId, completeCount))
}
}
print(id)
names(completeFrame) <- c("id", "nobs")
completeFrame[match(id, completeFrame$id),]
completeFrame
}
complete("specdata", 30:25)
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
complete <- function(directory, id = 1:332) {
completeFrame <- as.data.frame(x= numeric(0), y= integer(0), z = character(0))
##  Determine all file names in the specified directory (ending in .csv)
file.names <- list.files(directory, full.names = TRUE)
##  Iterate through the file names
for (fileName in file.names) {
##  Read in the file
fileFrame <- read.csv(fileName)
##  Determine the file/monitor ID
fileId <- as.numeric(fileFrame[1, 4])
##  Determine if the ID of the record matches a specified ID
if (fileId %in% id) {
##  ID matches, iterate through all records in the file
numRows <- nrow(fileFrame)
completeCount <- 0
for (i in 1:numRows) {
sulfateRating <- fileFrame [i, 2]
nitrateRating <- fileFrame [i, 3]
if (!is.na(sulfateRating)) {
completeCount <- completeCount + 1
}
}
completeFrame <- rbind(completeFrame, c(fileId, completeCount))
}
}
print(id)
names(completeFrame) <- c("id", "nobs")
completeFrame[match(id, completeFrame$"id"),]
completeFrame
}
complete("specdata", 30:25)
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
complete <- function(directory, id = 1:332) {
completeFrame <- as.data.frame(x= numeric(0), y= integer(0), z = character(0))
##  Determine all file names in the specified directory (ending in .csv)
file.names <- list.files(directory, full.names = TRUE)
##  Iterate through the file names
for (fileName in file.names) {
##  Read in the file
fileFrame <- read.csv(fileName)
##  Determine the file/monitor ID
fileId <- as.numeric(fileFrame[1, 4])
##  Determine if the ID of the record matches a specified ID
if (fileId %in% id) {
##  ID matches, iterate through all records in the file
numRows <- nrow(fileFrame)
completeCount <- 0
for (i in 1:numRows) {
sulfateRating <- fileFrame [i, 2]
nitrateRating <- fileFrame [i, 3]
if (!is.na(sulfateRating)) {
completeCount <- completeCount + 1
}
}
completeFrame <- rbind(completeFrame, c(fileId, completeCount))
}
}
print(id)
names(completeFrame) <- c("id", "nobs")
completeFrame[match(id, completeFrame$"id"),]
}
complete("specdata", 30:25)
complete("specdata", c(2, 4, 8, 10, 12))
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
complete <- function(directory, id = 1:332) {
completeFrame <- as.data.frame(x= numeric(0), y= integer(0), z = character(0))
##  Determine all file names in the specified directory (ending in .csv)
file.names <- list.files(directory, full.names = TRUE)
##  Iterate through the file names
for (fileName in file.names) {
##  Read in the file
fileFrame <- read.csv(fileName)
##  Determine the file/monitor ID
fileId <- as.numeric(fileFrame[1, 4])
##  Determine if the ID of the record matches a specified ID
if (fileId %in% id) {
##  ID matches, iterate through all records in the file
numRows <- nrow(fileFrame)
completeCount <- 0
for (i in 1:numRows) {
sulfateRating <- fileFrame [i, 2]
nitrateRating <- fileFrame [i, 3]
if (!is.na(sulfateRating)) {
completeCount <- completeCount + 1
}
}
completeFrame <- rbind(completeFrame, c(fileId, completeCount))
}
}
names(completeFrame) <- c("id", "nobs")
completeFrame[match(id, completeFrame$"id"),]
}
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
complete <- function(directory, id = 1:332) {
completeFrame <- as.data.frame(x= numeric(0), y= integer(0), z = character(0))
##  Determine all file names in the specified directory (ending in .csv)
file.names <- list.files(directory, full.names = TRUE)
##  Iterate through the file names
for (fileName in file.names) {
##  Read in the file
fileFrame <- read.csv(fileName)
##  Determine the file/monitor ID
fileId <- as.numeric(fileFrame[1, 4])
##  Determine if the ID of the record matches a specified ID
if (fileId %in% id) {
##  ID matches, iterate through all records in the file
completeCount <- 0
numRows <- nrow(fileFrame)
for (i in 1:numRows) {
if (!is.na(fileFrame [i, 2]) && !is.na(fileFrame [i, 3])) {
completeCount <- completeCount + 1
}
}
completeFrame <- rbind(completeFrame, c(fileId, completeCount))
}
}
names(completeFrame) <- c("id", "nobs")
completeFrame[match(id, completeFrame$"id"),]
}
complete("specdata", 30:25)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 3)
complete("specdata", 1)
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
complete <- function(directory, id = 1:332) {
completeFrame <- as.data.frame(x= numeric(0), y= integer(0), z = character(0))
##  Determine all file names in the specified directory (ending in .csv)
file.names <- list.files(directory, full.names = TRUE)
##  Iterate through the file names
for (fileName in file.names) {
##  Read in the file
fileFrame <- read.csv(fileName)
##  Determine the file/monitor ID
fileId <- as.numeric(fileFrame[1, 4])
##  Determine if the ID of the record matches a specified ID
if (fileId %in% id) {
##  ID matches, iterate through all records in the file
completeCount <- 0
numRows <- nrow(fileFrame)
for (i in 1:numRows) {
##  If a nitrate and sulfate
if (!is.na(fileFrame[i]$"nitrate") && !is.na(fileFrame[i]$"sulfate")) {
completeCount <- completeCount + 1
}
}
completeFrame <- rbind(completeFrame, c(fileId, completeCount))
}
}
names(completeFrame) <- c("id", "nobs")
completeFrame[match(id, completeFrame$"id"),]
}
complete("specdata", 1)
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
complete <- function(directory, id = 1:332) {
completeFrame <- as.data.frame(x= numeric(0), y= integer(0), z = character(0))
##  Determine all file names in the specified directory (ending in .csv)
file.names <- list.files(directory, full.names = TRUE)
##  Iterate through the file names
for (fileName in file.names) {
##  Read in the file
fileFrame <- read.csv(fileName)
##  Determine the file/monitor ID
fileId <- as.numeric(fileFrame[1, 4])
##  Determine if the ID of the record matches a specified ID
if (fileId %in% id) {
##  ID matches, iterate through all records in the file
completeCount <- 0
numRows <- nrow(fileFrame)
for (i in 1:numRows) {
##  Add 1 to number observations if nitrate and sulfate values are present
if (!is.na(fileFrame [i, 2]) && !is.na(fileFrame [i, 3])) {
completeCount <- completeCount + 1
}
}
##  Add a row to the resulting data frame
completeFrame <- rbind(completeFrame, c(fileId, completeCount))
}
}
##  Provide column names to the data frame and ensure the listing matches the order of the id parameter
names(completeFrame) <- c("id", "nobs")
completeFrame[match(id, completeFrame$"id"),]
}
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
?cor
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
corr <- function(directory, threshold = 0) {
correlationVector <- c()
##  Determine all file names in the specified directory (ending in .csv)
file.names <- list.files(directory, full.names = TRUE)
##  Iterate through the file names
for (fileName in file.names) {
##  Read in the file
fileFrame <- read.csv(fileName)
##  Determine the file/monitor ID
fileId <- as.numeric(fileFrame[1, 4])
##  Iterate through all records in the file
completeCount <- 0
numRows <- nrow(fileFrame)
for (i in 1:numRows) {
##  Add 1 to number observations if nitrate and sulfate values are present
if (!is.na(fileFrame [i, 2]) && !is.na(fileFrame [i, 3])) {
completeCount <- completeCount + 1
}
}
if (completeCount > threshold) {
correlationVector <- c(correlationVector, cor(fileFrame[2], fileFrame[3]))
}
}
##  Provide column names to the data frame and ensure the listing matches the order of the id parameter
correlationVector
}
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
corr <- function(directory, threshold = 0) {
correlationVector <- c()
##  Determine all file names in the specified directory (ending in .csv)
file.names <- list.files(directory, full.names = TRUE)
##  Iterate through the file names
for (fileName in file.names) {
##  Read in the file
fileFrame <- read.csv(fileName)
##  Determine the file/monitor ID
fileId <- as.numeric(fileFrame[1, 4])
##  Iterate through all records in the file
completeCount <- 0
numRows <- nrow(fileFrame)
for (i in 1:numRows) {
##  Add 1 to number observations if nitrate and sulfate values are present
if (!is.na(fileFrame [i, 2]) && !is.na(fileFrame [i, 3])) {
completeCount <- completeCount + 1
}
}
if (completeCount > threshold) {
print(cor(fileFrame[2], fileFrame[3], use="pairwise.complete.obs", method="pearson"))
correlationVector <- c(correlationVector, cor(fileFrame[2], fileFrame[3], use="pairwise.complete.obs", method="pearson"))
}
}
##  Provide column names to the data frame and ensure the listing matches the order of the id parameter
correlationVector
}
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
corr <- function(directory, threshold = 0) {
correlationVector <- c()
##  Determine all file names in the specified directory (ending in .csv)
file.names <- list.files(directory, full.names = TRUE)
##  Iterate through the file names
for (fileName in file.names) {
##  Read in the file
fileFrame <- read.csv(fileName)
##  Determine the file/monitor ID
fileId <- as.numeric(fileFrame[1, 4])
##  Iterate through all records in the file
completeCount <- 0
numRows <- nrow(fileFrame)
for (i in 1:numRows) {
##  Add 1 to number observations if nitrate and sulfate values are present
if (!is.na(fileFrame [i, 2]) && !is.na(fileFrame [i, 3])) {
completeCount <- completeCount + 1
}
}
if (completeCount > threshold) {
correlationVector <- c(correlationVector, cor(fileFrame[2], fileFrame[3], use="pairwise.complete.obs", method="pearson"))
}
}
##  Provide column names to the data frame and ensure the listing matches the order of the id parameter
correlationVector
}
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
